// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	models "api-golang/models"

	mock "github.com/stretchr/testify/mock"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: producto
func (_m *ProductService) CreateProduct(producto models.Product) (models.Product, error) {
	ret := _m.Called(producto)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Product) (models.Product, error)); ok {
		return rf(producto)
	}
	if rf, ok := ret.Get(0).(func(models.Product) models.Product); ok {
		r0 = rf(producto)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(models.Product) error); ok {
		r1 = rf(producto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllProductos provides a mock function with given fields:
func (_m *ProductService) GetAllProductos() ([]models.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllProductos")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
